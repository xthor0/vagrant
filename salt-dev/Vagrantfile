# -*- mode: ruby -*-
# vi: set ft=ruby :

VAGRANTFILE_API_VERSION = "2"

# define a minion for each OS type
cluster = {
  "bionic" => { :cpus => 1, :mem => 1024, :box => "generic/ubuntu1804", :count => 0 },
  "focal" => { :cpus => 1, :mem => 1024, :box => "generic/ubuntu2004", :count => 0 },
  "buster" => { :cpus => 1, :mem => 1024, :box => "generic/debian10", :count => 0 },
  "bullseye" => { :cpus => 1, :mem => 1024, :box => "generic/debian11", :count => 1 },
  "centos7" => { :cpus => 1, :mem => 1024, :box => "generic/centos7", :count => 0 },
  "centos8" => { :cpus => 1, :mem => 1024, :box => "generic/centos8", :count => 0 },
  "rocky8" => { :cpus => 1, :mem => 1024, :box => "generic/rocky8", :count => 0 }
}

# pick a subnet that isn't in use on your personal or corporate network.
subnet = "192.168.56"

# I wanted to use DHCP so I wouldn't have to randomize IP addresses, but...
# it doesn't work well with VirtualBox. Sad.
r = Random.new

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # config options for hostmanager
  #config.hostmanager.enabled = true
  #config.hostmanager.manage_host = false # this is done with vagrant-hostsupdater
  #config.hostmanager.manage_guest = true
  #config.hostmanager.ignore_private_ip = false
  #config.hostmanager.include_offline = true

  # salt-master is primary. gets built no matter what.
  config.vm.define "salt-master", primary: true do |master|
    master.vm.box = "generic/debian11"
    master.vm.hostname = "salt-master"
    master.vm.network :private_network, ip: subnet + ".10"
    #master.hostsupdater.aliases = ["salt"]
    #master.hostmanager.aliases = ["salt"]
    master.vm.synced_folder "salt_root/", "/srv/salt/"
    master.vm.synced_folder "~/git/personal/salt-top", "/srv/salt/states/"
    config.vm.provision :salt do |salt|
      salt.install_master = true
      salt.no_minion = true
      salt.master_config = "etc/master"
      salt.python_version = "3"
      #salt.run_highstate = true
    end
    master.vm.provider :virtualbox do |vb, override|
      vb.customize ["modifyvm", :id, "--memory", "2048", "--cpus", "2", "--hwvirtex", "on"]
    end # end provider
    # this is stupid, but apparently salt.run_highstate doesn't work on the master
    #master.vm.provision "shell", inline: <<-EOF
    #  sleep 20 && salt-call state.highstate
    #EOF
  end # end salt-master
 
  # build minions
  cluster.each_with_index do |(hostname, info), index|
    (1..info[:count]).each do |i|
      vmname = hostname + "-" + "#{i}"
      end_ip = r.rand(15..254)
      config.vm.define vmname do |cfg|
        cfg.vm.box = info[:box]
        cfg.vm.network :private_network, :ip => "#{subnet}" + "." + "#{end_ip}"
        cfg.vm.hostname = vmname
        cfg.vm.provision :salt do |salt|
          salt.install_master = false
          salt.minion_config = "etc/minion.withmaster"
          salt.python_version = "3"
          salt.run_highstate = true
        end
        cfg.vm.provider :virtualbox do |vb, override|
          vb.customize ["modifyvm", :id, "--memory", info[:mem], "--cpus", info[:cpus], "--hwvirtex", "on"]
        end # end provider
      end # end config
    end # end for loop for count
  end # end cluster
end # end overall config

